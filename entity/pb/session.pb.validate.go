// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: session.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateReqMultiError, or nil
// if none found.
func (m *CreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMaxInactiveInterval() <= 0 {
		err := CreateReqValidationError{
			field:  "MaxInactiveInterval",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Attributes

	if len(errors) > 0 {
		return CreateReqMultiError(errors)
	}

	return nil
}

// CreateReqMultiError is an error wrapping multiple validation errors returned
// by CreateReq.ValidateAll() if the designated constraints aren't met.
type CreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReqMultiError) AllErrors() []error { return m }

// CreateReqValidationError is the validation error returned by
// CreateReq.Validate if the designated constraints aren't met.
type CreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReqValidationError) ErrorName() string { return "CreateReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReqValidationError{}

// Validate checks the field values on CreateResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRespMultiError, or
// nil if none found.
func (m *CreateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	if len(errors) > 0 {
		return CreateRespMultiError(errors)
	}

	return nil
}

// CreateRespMultiError is an error wrapping multiple validation errors
// returned by CreateResp.ValidateAll() if the designated constraints aren't met.
type CreateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRespMultiError) AllErrors() []error { return m }

// CreateRespValidationError is the validation error returned by
// CreateResp.Validate if the designated constraints aren't met.
type CreateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRespValidationError) ErrorName() string { return "CreateRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRespValidationError{}

// Validate checks the field values on SetAttributeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetAttributeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAttributeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetAttributeReqMultiError, or nil if none found.
func (m *SetAttributeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAttributeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSessionId()) < 32 {
		err := SetAttributeReqValidationError{
			field:  "SessionId",
			reason: "value length must be at least 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := SetAttributeReqValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetValue()) < 1 {
		err := SetAttributeReqValidationError{
			field:  "Value",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetAttributeReqMultiError(errors)
	}

	return nil
}

// SetAttributeReqMultiError is an error wrapping multiple validation errors
// returned by SetAttributeReq.ValidateAll() if the designated constraints
// aren't met.
type SetAttributeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAttributeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAttributeReqMultiError) AllErrors() []error { return m }

// SetAttributeReqValidationError is the validation error returned by
// SetAttributeReq.Validate if the designated constraints aren't met.
type SetAttributeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAttributeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAttributeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAttributeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAttributeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAttributeReqValidationError) ErrorName() string { return "SetAttributeReqValidationError" }

// Error satisfies the builtin error interface
func (e SetAttributeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAttributeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAttributeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAttributeReqValidationError{}

// Validate checks the field values on SetAttributeResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetAttributeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAttributeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetAttributeRespMultiError, or nil if none found.
func (m *SetAttributeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAttributeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetAttributeRespMultiError(errors)
	}

	return nil
}

// SetAttributeRespMultiError is an error wrapping multiple validation errors
// returned by SetAttributeResp.ValidateAll() if the designated constraints
// aren't met.
type SetAttributeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAttributeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAttributeRespMultiError) AllErrors() []error { return m }

// SetAttributeRespValidationError is the validation error returned by
// SetAttributeResp.Validate if the designated constraints aren't met.
type SetAttributeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAttributeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAttributeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAttributeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAttributeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAttributeRespValidationError) ErrorName() string { return "SetAttributeRespValidationError" }

// Error satisfies the builtin error interface
func (e SetAttributeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAttributeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAttributeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAttributeRespValidationError{}

// Validate checks the field values on GetAttributeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAttributeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAttributeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAttributeReqMultiError, or nil if none found.
func (m *GetAttributeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAttributeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSessionId()) < 32 {
		err := GetAttributeReqValidationError{
			field:  "SessionId",
			reason: "value length must be at least 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := GetAttributeReqValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAttributeReqMultiError(errors)
	}

	return nil
}

// GetAttributeReqMultiError is an error wrapping multiple validation errors
// returned by GetAttributeReq.ValidateAll() if the designated constraints
// aren't met.
type GetAttributeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAttributeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAttributeReqMultiError) AllErrors() []error { return m }

// GetAttributeReqValidationError is the validation error returned by
// GetAttributeReq.Validate if the designated constraints aren't met.
type GetAttributeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttributeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttributeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttributeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttributeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttributeReqValidationError) ErrorName() string { return "GetAttributeReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAttributeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttributeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttributeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttributeReqValidationError{}

// Validate checks the field values on GetAttributeResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAttributeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAttributeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAttributeRespMultiError, or nil if none found.
func (m *GetAttributeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAttributeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionInvalid

	// no validation rules for Value

	if len(errors) > 0 {
		return GetAttributeRespMultiError(errors)
	}

	return nil
}

// GetAttributeRespMultiError is an error wrapping multiple validation errors
// returned by GetAttributeResp.ValidateAll() if the designated constraints
// aren't met.
type GetAttributeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAttributeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAttributeRespMultiError) AllErrors() []error { return m }

// GetAttributeRespValidationError is the validation error returned by
// GetAttributeResp.Validate if the designated constraints aren't met.
type GetAttributeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttributeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttributeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttributeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttributeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttributeRespValidationError) ErrorName() string { return "GetAttributeRespValidationError" }

// Error satisfies the builtin error interface
func (e GetAttributeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttributeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttributeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttributeRespValidationError{}

// Validate checks the field values on GetAllAttributeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllAttributeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllAttributeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllAttributeReqMultiError, or nil if none found.
func (m *GetAllAttributeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllAttributeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSessionId()) < 32 {
		err := GetAllAttributeReqValidationError{
			field:  "SessionId",
			reason: "value length must be at least 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAllAttributeReqMultiError(errors)
	}

	return nil
}

// GetAllAttributeReqMultiError is an error wrapping multiple validation errors
// returned by GetAllAttributeReq.ValidateAll() if the designated constraints
// aren't met.
type GetAllAttributeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllAttributeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllAttributeReqMultiError) AllErrors() []error { return m }

// GetAllAttributeReqValidationError is the validation error returned by
// GetAllAttributeReq.Validate if the designated constraints aren't met.
type GetAllAttributeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllAttributeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllAttributeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllAttributeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllAttributeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllAttributeReqValidationError) ErrorName() string {
	return "GetAllAttributeReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllAttributeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllAttributeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllAttributeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllAttributeReqValidationError{}

// Validate checks the field values on GetAllAttributeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllAttributeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllAttributeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllAttributeRespMultiError, or nil if none found.
func (m *GetAllAttributeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllAttributeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionInvalid

	// no validation rules for Attributes

	if len(errors) > 0 {
		return GetAllAttributeRespMultiError(errors)
	}

	return nil
}

// GetAllAttributeRespMultiError is an error wrapping multiple validation
// errors returned by GetAllAttributeResp.ValidateAll() if the designated
// constraints aren't met.
type GetAllAttributeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllAttributeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllAttributeRespMultiError) AllErrors() []error { return m }

// GetAllAttributeRespValidationError is the validation error returned by
// GetAllAttributeResp.Validate if the designated constraints aren't met.
type GetAllAttributeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllAttributeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllAttributeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllAttributeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllAttributeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllAttributeRespValidationError) ErrorName() string {
	return "GetAllAttributeRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllAttributeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllAttributeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllAttributeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllAttributeRespValidationError{}

// Validate checks the field values on RemoveAttributeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveAttributeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveAttributeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveAttributeReqMultiError, or nil if none found.
func (m *RemoveAttributeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveAttributeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSessionId()) < 32 {
		err := RemoveAttributeReqValidationError{
			field:  "SessionId",
			reason: "value length must be at least 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := RemoveAttributeReqValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveAttributeReqMultiError(errors)
	}

	return nil
}

// RemoveAttributeReqMultiError is an error wrapping multiple validation errors
// returned by RemoveAttributeReq.ValidateAll() if the designated constraints
// aren't met.
type RemoveAttributeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveAttributeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveAttributeReqMultiError) AllErrors() []error { return m }

// RemoveAttributeReqValidationError is the validation error returned by
// RemoveAttributeReq.Validate if the designated constraints aren't met.
type RemoveAttributeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAttributeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAttributeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAttributeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAttributeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAttributeReqValidationError) ErrorName() string {
	return "RemoveAttributeReqValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveAttributeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAttributeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAttributeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAttributeReqValidationError{}

// Validate checks the field values on RemoveAttributeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveAttributeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveAttributeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveAttributeRespMultiError, or nil if none found.
func (m *RemoveAttributeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveAttributeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveAttributeRespMultiError(errors)
	}

	return nil
}

// RemoveAttributeRespMultiError is an error wrapping multiple validation
// errors returned by RemoveAttributeResp.ValidateAll() if the designated
// constraints aren't met.
type RemoveAttributeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveAttributeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveAttributeRespMultiError) AllErrors() []error { return m }

// RemoveAttributeRespValidationError is the validation error returned by
// RemoveAttributeResp.Validate if the designated constraints aren't met.
type RemoveAttributeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAttributeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAttributeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAttributeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAttributeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAttributeRespValidationError) ErrorName() string {
	return "RemoveAttributeRespValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveAttributeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAttributeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAttributeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAttributeRespValidationError{}

// Validate checks the field values on InvalidateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InvalidateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InvalidateReqMultiError, or
// nil if none found.
func (m *InvalidateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSessionId()) < 32 {
		err := InvalidateReqValidationError{
			field:  "SessionId",
			reason: "value length must be at least 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InvalidateReqMultiError(errors)
	}

	return nil
}

// InvalidateReqMultiError is an error wrapping multiple validation errors
// returned by InvalidateReq.ValidateAll() if the designated constraints
// aren't met.
type InvalidateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateReqMultiError) AllErrors() []error { return m }

// InvalidateReqValidationError is the validation error returned by
// InvalidateReq.Validate if the designated constraints aren't met.
type InvalidateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateReqValidationError) ErrorName() string { return "InvalidateReqValidationError" }

// Error satisfies the builtin error interface
func (e InvalidateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateReqValidationError{}

// Validate checks the field values on InvalidateResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InvalidateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InvalidateRespMultiError,
// or nil if none found.
func (m *InvalidateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InvalidateRespMultiError(errors)
	}

	return nil
}

// InvalidateRespMultiError is an error wrapping multiple validation errors
// returned by InvalidateResp.ValidateAll() if the designated constraints
// aren't met.
type InvalidateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateRespMultiError) AllErrors() []error { return m }

// InvalidateRespValidationError is the validation error returned by
// InvalidateResp.Validate if the designated constraints aren't met.
type InvalidateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateRespValidationError) ErrorName() string { return "InvalidateRespValidationError" }

// Error satisfies the builtin error interface
func (e InvalidateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateRespValidationError{}
