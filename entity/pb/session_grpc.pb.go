// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.3
// source: session.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Session_Create_FullMethodName          = "/com.seezoon.session.Session/Create"
	Session_SetAttribute_FullMethodName    = "/com.seezoon.session.Session/SetAttribute"
	Session_GetAttribute_FullMethodName    = "/com.seezoon.session.Session/GetAttribute"
	Session_Get_FullMethodName             = "/com.seezoon.session.Session/Get"
	Session_GetData_FullMethodName         = "/com.seezoon.session.Session/GetData"
	Session_RemoveAttribute_FullMethodName = "/com.seezoon.session.Session/RemoveAttribute"
	Session_Invalidate_FullMethodName      = "/com.seezoon.session.Session/Invalidate"
)

// SessionClient is the client API for Session service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionClient interface {
	// 创建session
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error)
	// 设置属性
	SetAttribute(ctx context.Context, in *SetAttributeReq, opts ...grpc.CallOption) (*SetAttributeResp, error)
	// 获取属性
	GetAttribute(ctx context.Context, in *GetAttributeReq, opts ...grpc.CallOption) (*GetAttributeResp, error)
	// 获取全部属性及内容
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	GetData(ctx context.Context, in *GetDataReq, opts ...grpc.CallOption) (*GetDataResp, error)
	// 删除属性
	RemoveAttribute(ctx context.Context, in *RemoveAttributeReq, opts ...grpc.CallOption) (*RemoveAttributeResp, error)
	// 销毁
	Invalidate(ctx context.Context, in *InvalidateReq, opts ...grpc.CallOption) (*InvalidateResp, error)
}

type sessionClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionClient(cc grpc.ClientConnInterface) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Session_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) SetAttribute(ctx context.Context, in *SetAttributeReq, opts ...grpc.CallOption) (*SetAttributeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAttributeResp)
	err := c.cc.Invoke(ctx, Session_SetAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) GetAttribute(ctx context.Context, in *GetAttributeReq, opts ...grpc.CallOption) (*GetAttributeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAttributeResp)
	err := c.cc.Invoke(ctx, Session_GetAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResp)
	err := c.cc.Invoke(ctx, Session_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) GetData(ctx context.Context, in *GetDataReq, opts ...grpc.CallOption) (*GetDataResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataResp)
	err := c.cc.Invoke(ctx, Session_GetData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) RemoveAttribute(ctx context.Context, in *RemoveAttributeReq, opts ...grpc.CallOption) (*RemoveAttributeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAttributeResp)
	err := c.cc.Invoke(ctx, Session_RemoveAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) Invalidate(ctx context.Context, in *InvalidateReq, opts ...grpc.CallOption) (*InvalidateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvalidateResp)
	err := c.cc.Invoke(ctx, Session_Invalidate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServer is the server API for Session service.
// All implementations must embed UnimplementedSessionServer
// for forward compatibility
type SessionServer interface {
	// 创建session
	Create(context.Context, *CreateReq) (*CreateResp, error)
	// 设置属性
	SetAttribute(context.Context, *SetAttributeReq) (*SetAttributeResp, error)
	// 获取属性
	GetAttribute(context.Context, *GetAttributeReq) (*GetAttributeResp, error)
	// 获取全部属性及内容
	Get(context.Context, *GetReq) (*GetResp, error)
	GetData(context.Context, *GetDataReq) (*GetDataResp, error)
	// 删除属性
	RemoveAttribute(context.Context, *RemoveAttributeReq) (*RemoveAttributeResp, error)
	// 销毁
	Invalidate(context.Context, *InvalidateReq) (*InvalidateResp, error)
	mustEmbedUnimplementedSessionServer()
}

// UnimplementedSessionServer must be embedded to have forward compatible implementations.
type UnimplementedSessionServer struct {
}

func (UnimplementedSessionServer) Create(context.Context, *CreateReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSessionServer) SetAttribute(context.Context, *SetAttributeReq) (*SetAttributeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAttribute not implemented")
}
func (UnimplementedSessionServer) GetAttribute(context.Context, *GetAttributeReq) (*GetAttributeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttribute not implemented")
}
func (UnimplementedSessionServer) Get(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSessionServer) GetData(context.Context, *GetDataReq) (*GetDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedSessionServer) RemoveAttribute(context.Context, *RemoveAttributeReq) (*RemoveAttributeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAttribute not implemented")
}
func (UnimplementedSessionServer) Invalidate(context.Context, *InvalidateReq) (*InvalidateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invalidate not implemented")
}
func (UnimplementedSessionServer) mustEmbedUnimplementedSessionServer() {}

// UnsafeSessionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionServer will
// result in compilation errors.
type UnsafeSessionServer interface {
	mustEmbedUnimplementedSessionServer()
}

func RegisterSessionServer(s grpc.ServiceRegistrar, srv SessionServer) {
	s.RegisterService(&Session_ServiceDesc, srv)
}

func _Session_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Session_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_SetAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).SetAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Session_SetAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).SetAttribute(ctx, req.(*SetAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_GetAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).GetAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Session_GetAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).GetAttribute(ctx, req.(*GetAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Session_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Session_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).GetData(ctx, req.(*GetDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_RemoveAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).RemoveAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Session_RemoveAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).RemoveAttribute(ctx, req.(*RemoveAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_Invalidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).Invalidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Session_Invalidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).Invalidate(ctx, req.(*InvalidateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Session_ServiceDesc is the grpc.ServiceDesc for Session service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Session_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.seezoon.session.Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Session_Create_Handler,
		},
		{
			MethodName: "SetAttribute",
			Handler:    _Session_SetAttribute_Handler,
		},
		{
			MethodName: "GetAttribute",
			Handler:    _Session_GetAttribute_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Session_Get_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _Session_GetData_Handler,
		},
		{
			MethodName: "RemoveAttribute",
			Handler:    _Session_RemoveAttribute_Handler,
		},
		{
			MethodName: "Invalidate",
			Handler:    _Session_Invalidate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}
